name: Deploy to EC2

on:
  push:
    branches:
      - main  # main 브랜치에 push될 때 실행

jobs:
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3  # 소스 코드 가져오기

    - name: Set up Docker
      uses: docker/setup-buildx-action@v2  # Docker 빌드 도구 설정

    - name: Log in to Docker Hub
      uses: docker/login-action@v2  # Docker Hub 로그인
      with:
        username: ${{ secrets.DOCKER_USERNAME }}  # Docker Hub 사용자명
        password: ${{ secrets.DOCKER_PASSWORD }}  # Docker Hub 비밀번호

    - name: Build and push Docker image
      run: |
        docker build -t nnplanner/app:latest .
        docker push nnplanner/app:latest

    - name: Upload Docker Compose file to EC2
      uses: appleboy/scp-action@v0.1.7  # SCP를 사용해 docker-compose.yml 업로드
      with:
        host: ${{ secrets.EC2_HOST }}  # EC2 IP 주소
        username: ${{ secrets.EC2_USER }}  # SSH 사용자 이름
        key: ${{ secrets.EC2_KEY }}  # 개인 SSH 키
        source: ./docker-compose.yml  # 로컬에서 업로드할 파일
        target: /home/ec2-user/  # EC2에 저장할 경로

    - name: SSH to EC2 and deploy
      uses: appleboy/ssh-action@v0.1.7  # SSH를 사용해 EC2에 접속
      with:
        host: ${{ secrets.EC2_HOST }}  # EC2 IP 주소
        username: ${{ secrets.EC2_USER }}  # SSH 사용자 이름
        key: ${{ secrets.EC2_KEY }}  # 개인 SSH 키
        script: |
          # Docker 서비스 활성화
          sudo systemctl start docker
          sudo systemctl enable docker
          
          # Docker 소켓 권한 수정
          sudo chmod 666 /var/run/docker.sock
          
          # 환경변수 설정
          echo "LOCAL_DB_URL=postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@db:5432/${{ secrets.POSTGRES_DB }}" >> /home/ec2-user/.env
          echo "LOCAL_DB_USER=${{ secrets.LOCAL_DB_USER }}" >> /home/ec2-user/.env
          echo "LOCAL_DB_PASSWORD=${{ secrets.LOCAL_DB_PASSWORD }}" >> /home/ec2-user/.env
          echo "LOCAL_MONGODB_URL=${{ secrets.LOCAL_MONGODB_URL }}" >> /home/ec2-user/.env
          echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> /home/ec2-user/.env
          echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> /home/ec2-user/.env
          echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> /home/ec2-user/.env
          echo "GOOGLE_EMAIL=${{ secrets.GOOGLE_EMAIL }}" >> /home/ec2-user/.env
          echo "GOOGLE_PASSWORD=${{ secrets.GOOGLE_PASSWORD }}" >> /home/ec2-user/.env
          echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> /home/ec2-user/.env
          echo "SCHOOL_API_KEY=${{ secrets.SCHOOL_API_KEY }}" >> /home/ec2-user/.env
          echo "FOOD_API_KEY=${{ secrets.FOOD_API_KEY }}" >> /home/ec2-user/.env
          echo "URL_SERVER=${{ secrets.URL_SERVER }}" >> /home/ec2-user/.env
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> /home/ec2-user/.env

          # 기존 컨테이너 및 이미지 정리
          sudo docker-compose -f /home/ec2-user/docker-compose.yml --env-file /home/ec2-user/.env down
          sudo docker rmi -f nnplanner/app:latest || true
          
          # 최신 이미지 가져오기
          sudo docker pull nnplanner/app:latest
          
          # Docker Compose로 서비스 재시작
          sudo docker-compose -f /home/ec2-user/docker-compose.yml --env-file /home/ec2-user/.env up -d
