name: Deploy to EC2

on:
  push:
    branches:
      - main  # main 브랜치에 push될 때 실행

jobs:
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3  # 소스 코드 가져오기

    - name: Set up Docker
      uses: docker/setup-buildx-action@v2  # Docker 빌드 도구 설정

    - name: Log in to Docker Hub
      uses: docker/login-action@v2  # Docker Hub 로그인
      with:
        username: ${{ secrets.DOCKER_USERNAME }}  # Docker Hub 사용자명
        password: ${{ secrets.DOCKER_PASSWORD }}  # Docker Hub 비밀번호

    - name: Build and push Docker image
      run: |
        docker build -t your-dockerhub-username/nnplanner:latest .
        docker push your-dockerhub-username/nnplanner:latest

    - name: SSH to EC2 and deploy
      uses: appleboy/ssh-action@v0.1.7  # SSH를 사용해 EC2에 접속
      with:
        host: ${{ secrets.EC2_HOST }}  # EC2 IP 주소
        username: ${{ secrets.EC2_USER }}  # SSH 사용자 이름
        key: ${{ secrets.EC2_KEY }}  # 개인 SSH 키
        script: |
          # Docker 및 Docker Compose 설치 확인
          which docker || sudo apt-get update && sudo apt-get install -y docker.io
          which docker-compose || sudo apt-get install -y docker-compose
          
          # 환경변수 설정
          export LOCAL_DB_URL="${{ secrets.LOCAL_DB_URL }}"
          export LOCAL_DB_USER="${{ secrets.LOCAL_DB_USER }}"
          export LOCAL_DB_PASSWORD="${{ secrets.LOCAL_DB_PASSWORD }}"
          export REDIS_HOST="${{ secrets.REDIS_HOST }}"
          export REDIS_PORT="${{ secrets.REDIS_PORT }}"
          export REDIS_PASSWORD="${{ secrets.REDIS_PASSWORD }}"
          export JWT_SECRET_KEY="${{ secrets.JWT_SECRET_KEY }}"
          export SCHOOL_API_KEY="${{ secrets.SCHOOL_API_KEY }}"
          export FOOD_API_KEY="${{ secrets.FOOD_API_KEY }}"
          export URL_SERVER="${{ secrets.URL_SERVER }}"
          
          # 기존 컨테이너 및 이미지 정리
          docker-compose -f /path/to/your/docker-compose.yml down
          docker rmi -f your-dockerhub-username/nnplanner:latest || true
          
          # 최신 이미지 가져오기
          docker pull your-dockerhub-username/nnplanner:latest
          
          # Docker Compose로 서비스 재시작
          docker-compose -f /path/to/your/docker-compose.yml up -d
