services:
  app:
    image: nnplanner/app:latest  # Spring 애플리케이션 Docker 이미지 이름
    build:
      context: .  # Dockerfile 경로
      dockerfile: Dockerfile
    ports:
      - "8080:8080"  # 호스트와 컨테이너 포트 매핑
    environment:
      LOCAL_DB_URL: ${LOCAL_DB_URL}
      LOCAL_DB_USER: ${LOCAL_DB_USER}
      LOCAL_DB_PASSWORD: ${LOCAL_DB_PASSWORD}
      LOCAL_MONGODB_URL: ${LOCAL_MONGODB_URL}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      GOOGLE_EMAIL: ${GOOGLE_EMAIL}
      GOOGLE_PASSWORD: ${GOOGLE_PASSWORD}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      SCHOOL_API_KEY: ${SCHOOL_API_KEY}
      FOOD_API_KEY: ${FOOD_API_KEY}
      URL_SERVER: ${URL_SERVER}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_PASSWORD: ${GOOGLE_CLIENT_PASSWORD}
      OAUTH_URL: ${OAUTH_URL}
    depends_on:
      - db
      - redis

  db:
    image: postgres:15.6  # PostgreSQL 이미지
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: ${LOCAL_DB_USER}  # 환경 변수로 사용자명 설정
      POSTGRES_PASSWORD: ${LOCAL_DB_PASSWORD}  # 환경 변수로 비밀번호 설정
      POSTGRES_DB: ${POSTGRES_DB}  # 환경 변수로 데이터베이스 이름 설정
    ports:
      - "5432:5432"  # PostgreSQL 포트 매핑
    volumes:
      - db-data:/var/lib/postgresql/data

  redis:
    image: redis:latest  # Redis 이미지
    container_name: redis
    restart: always
    ports:
      - "6379:6379"  # Redis 포트 매핑
    command: [ "redis-server", "--requirepass", "${REDIS_PASSWORD}" ]  # 환경 변수로 Redis 비밀번호 설정
    volumes:
      - redis-data:/data

volumes:
  db-data:  # PostgreSQL 데이터 저장
  redis-data:  # Redis 데이터 저장